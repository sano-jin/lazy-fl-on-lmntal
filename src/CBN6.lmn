abs    @@ R = eval(abs(E), !Env) :- R = val(cl(E, !Env)).

app    @@ R = eval((E1, E2), !Env)
          :- R = eval(E1, !Env_), !Env_ = [th(E2)|!Env].

beta   @@ R = val(cl(E, !Env)), !Env = [H|T]
          :- R = eval(E, !Env), !Env = [H|T].

lookup @@ R = eval(s(S), !Env), !Env = [H|!T]
          :- R = eval(S, !T), !Env = [H|!T].

force  @@ R = eval(z, !Env), !Env = [th(H)|!T]
          :- R = eval(z, !Env), !Env = [eval(H, !T)|!T].

instantiate @@
          R = eval(z, !Env), !Env = [val(H)|!T]
          :- ground(H) | R = val(H), !Env = [val(H)|!T].

plus   @@ R = eval(E1 + E2, !Env)
          :- R = plus(eval(E1, !Env), eval(E2, !Env)).

add    @@ R = plus(val(X), val(Y)) :- Z = X + Y | R = val(Z).

number @@ R = eval(N, !Env) :- int(N) | R = val(N). 


% (\x.4)(1 + 2)
/*
init @@ :- uniq | 
test = eval((abs(4), 1 + 2),!Nil).
*/


% (\x.x + x)(1 + 2)
/*
init @@ :- uniq | 
test = eval((abs(z + z), 1 + 2),!Nil).
*/

% (\x.x)(\y.y + y)(1 + 2)
/*
init @@ :- uniq | 
test = eval(((abs(z), abs(z + z)), 1 + 2),!Nil).
*/

% (\xy.xy)(\y.y + y)(1 + 2)
/*
init @@ :- uniq | 
test = eval(((abs(abs((s(z), z))), abs(z + z)), 1 + 2),!Nil).
*/

% (\f.f 1 (2+3)) (\xy.x)
% (\0 1 (2+3)) (\\1)
init @@ :- uniq |
test = eval(
 (abs(((z, 1), 2 + 3)),
	  abs(abs(s(z)))
	 ),
!Nil).

% the followings are not working

% (\p.p(\xy.x))(\sbf.fsb) 1 (2+3)
% (\0(\\1))((\\\021) 1 (2+3))
/*
init @@ :- uniq |
test = eval(
	(abs((z,(abs(abs(s(z)))))), % CAR
		((abs(abs(abs(((z, s(s(z))), s(z))))),
		  1),
 2 + 3)
),
!Nil).
*/

