{'$callback'(zerostep).
% curry
R = fun([V|Vs], E) :- R = abs(V, fun(Vs, E)).
R = fun([], E) :- R = E. 

% reverse
R = rev(L) :- R = reverse(L, []).
R = reverse([], L) :- R = L.
R = reverse([H|T], ACC) :- R = reverse(T, [H|ACC]).

% append
R = append([], L) :- R = L.
R = append([H|T], L) :- R = [H|append(T, L)].

}.

abs    @@ R = eval(abs(V, E), Env, Sp)
          :- R = val(cl(V, E, Env, Sp)).

app    @@ R = eval((E1, E2), Env, Sp)
          :- R = eval(E1, Env, append(Sp, [E2])).

beta   @@ R = val(cl(V, E, Env, [H|T]))
          :- R = eval(E, !Env_, T), !Env_ = [asc(V, th(H))|Env].

lookup @@ R = eval(V1, !Env, Sp), !Env = [asc(V2, H)|!T]
          :- V1 \== V2 % , string(V1)
          | R = eval(V1, !T, Sp), !Env = [asc(V2, H)|!T].

force  @@ R = eval(V1, !Env, Sp), !Env = [asc(V2, th(H))|!T]
          :- V1 == V2, ground(Sp) % , string(V1)
          | R = eval(V1, !Env, Sp),
            !Env = [asc(V2, eval(H, !T, Sp))|!T].

instantiate @@
          R = eval(V1, !Env, Sp), !Env = [asc(V2, val(H))|!T]
          :- ground(H), V1 == V2, ground(Sp) % , string(V1)
          | R = val(H), !Env = [val(H)|!T].

plus   @@ R = eval(E1 + E2, !Env, [])
          :- R = plus(eval(E1, !Env, []), eval(E2, !Env, [])).

add    @@ R = plus(val(X), val(Y)) :- Z = X + Y | R = val(Z).

number @@ R = eval(N, !Env, Vs)
          :- int(N), ground(Vs)
          |  R = val(N). 


% (\x.4)(1 + 2)
/*
init @@ :- uniq | 
test = eval((abs(x, 4), 1 + 2),!Nil, []).
*/

% (\x.x + x)(1 + 2)
/*
init @@ :- uniq | 
test = eval((abs(x, x + x), 1 + 2),!Nil, []).
*/

% (\x.x)(\y.y + y)(1 + 2)
/*
init @@ :- uniq | 
test = eval(
 ((abs(x,x), abs(y,y + y)), 1 + 2),
!Nil, []).
*/

% (\xy.yx)(1 + 2)(\y.y + y)

init @@ :- uniq | 
test = eval(
 ((fun([x, y], (y, x)), 1 + 2), fun([z], z + z)),
!Nil, []).


% (\f.f 1 (2+3)) (\xy.x)
/*
init @@ :- uniq |
test = eval(
 (fun([f], ((f, 1), 2 + 3)),
 fun([x, y], x)
 ),
!Nil, []).
*/

% CAR CONS 
% (\p.p(\xy.x))((\sbf.fsb) 1 (2+3))
/*
init @@ :- uniq |
test = eval(
(fun([p], (p, fun([x,y], x))), 
 ((fun([s,b,f], ((f,s),b)),
   1),
  2+3)
 ),
!Nil, []).
*/

