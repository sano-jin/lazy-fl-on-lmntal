{
    /*
      main = id 3
      id = \x -> x
    */

/*
    init @@
    :- uniq |
	// stack
	stk = [!Main],
    dump = [],
    // heap 
    !Main = nSc([], eApp("id", 3)),
    !Id   = nSc(["x"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !Nil].
*/

    /*
 main = id 3
 id = s k k
 s = \x y z -> x z (y z)
 k = \x y -> x
    */

/*  
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], eApp("id", 3)),
    !Id   = nSc([], eApp(eApp("s", "k"), "k")),
    !S    = nSc(["x", "y", "z"], eApp(eApp("x", "z"), eApp("y", "z"))),
    !K    = nSc(["x", "y"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !G3 ],
    !G3 = [ asc("s"   , !S   ) | !G4 ],
    !G4 = [ asc("k"   , !K   ) | !Nil].
*/


    /*
      main = let x = 3; y = id x in y
      id x = x
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], 
		let_rec([ "x" = 3, 
			  "y" = eApp("id", "x") ],
       			"y"
		)),
    !Id = nSc(["x"], "x"),
      // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !Nil].
    */


    /*
      main = let rec x = id y; y = 3 in x
      id x = x
    */
    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], 
	       let_rec([ "x" = eApp("id", "y"), 
			 "y" = 3 ],
       		       "x"
	       )),
    !Id = nSc(["x"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !Nil].
    */

    
    /*
      K1 x y = y
      K x y = x
      pair x y f = f x y
      fst p = p K
      snd p = p K1
      f x y = 
        let_rec
          a = pair x b
          b = pair y a
        in
          fst (snd (snd (snd a)))
      main = f 3 4
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], eApp(eApp("f", 3), 4)),
    !F    = nSc(["x", "y"],
	       let_rec([ "a" = eApp(eApp("pair", "x"), "b"), 
			 "b" = eApp(eApp("pair", "y"), "a") 
		       ],
       		       eApp("fst", eApp("snd", eApp("snd", eApp("snd", "a"))))
	       )),
    !Snd  = nSc(["p"], eApp("p", "k1")),
    !Fst  = nSc(["p"], eApp("p", "k")),
    !Pair = nSc(["x", "y", "f"], eApp(eApp("f", "x"), "y")),
    !K1   = nSc(["x", "y"], "y"),
    !K    = nSc(["x", "y"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("f"   , !F   ) | !G3 ],
    !G3 = [ asc("snd" , !Snd ) | !G4 ],
    !G4 = [ asc("fst" , !Fst ) | !G5 ],
    !G5 = [ asc("pair", !Pair) | !G6 ],
    !G6 = [ asc("k"   , !K   ) | !G7 ],
    !G7 = [ asc("k1"  , !K1  ) | !Nil].
*/


    /*
      pair x y f = f x y
      fst x y = x
      snd x y = y
      main = (((pair 2) (snd 3)) fst)
      id x = x
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    // fst (pair 2 (snd 3))
    !Main = nSc([], eApp(eApp(eApp("pair", 2), eApp("snd", 3)), "fst")),
    !Pair = nSc(["x", "y", "f"], eApp(eApp("f", "x"), "y")),
    !Fst  = nSc(["x", "y"], "x"),
    !Snd  = nSc(["x", "y"], "y"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("pair", !Pair) | !G3 ],
    !G3 = [ asc("fst" , !Fst ) | !G4 ],
    !G4 = [ asc("snd" , !Snd ) | !Nil].
    */


    /*
      pair x y f = f x y
      fst x y = x
      snd x y = y
      main = let rec 
               list = pair 1 list
             in
               fst list
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], 
	       let_rec([ "list" = eApp(eApp("pair", 1), "list") ],
		       eApp("list", "fst")
	       )),
    !Pair = nSc(["x", "y", "f"], eApp(eApp("f", "x"), "y")),
    !Fst  = nSc(["x", "y"], "x"),
    !Snd  = nSc(["x", "y"], "y"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("pair", !Pair) | !G3 ],
    !G3 = [ asc("fst" , !Fst ) | !G4 ],
    !G4 = [ asc("snd" , !Snd ) | !Nil].
    */

    /*
      pair x y f = f x y
      fst x y = x
      snd x y = y
      list = pair 1 list
      main = list fst
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], eApp("list", "fst")),
    !List = nSc([], eApp(eApp("pair", 1), "list")),
    !Pair = nSc(["x", "y", "f"], eApp(eApp("f", "x"), "y")),
    !Fst  = nSc(["x", "y"], "x"),
    !Snd  = nSc(["x", "y"], "y"),

    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("pair", !Pair) | !G3 ],
    !G3 = [ asc("fst" , !Fst ) | !G4 ],
    !G4 = [ asc("snd" , !Snd ) | !G5 ],
    !G5 = [ asc("list", !List) | !Nil].
    */

    /*
 main          = twice twice twice id 3
 compose f g x = f (g x)
 id x          = x
 twice f       = compose f f 
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main    = nSc([], eApp(eApp(eApp(eApp("twice", "twice"), "twice"), "id"), 3)),
    !Compose = nSc(["f", "g", "x"], eApp("f", eApp("g", "x"))),
    !Id      = nSc(["x"], "x"),
    !Twice   = nSc(["f"], eApp(eApp("compose", "f"), "f")),  
    // global
    gbl = !G1,
    !G1 = [ asc("main"   , !Main   ) | !G2 ],
    !G2 = [ asc("compose", !Compose) | !G3 ],
    !G3 = [ asc("twice"  , !Twice  ) | !G4 ],
    !G4 = [ asc("id"     , !Id     ) | !Nil].
    */
    

    /*
      main = negate (id 3)
    */

    /*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main   = nSc([], eApp("negate", eApp("id", 3))),
    !Negate = nPrim(neg),
    !Id     = nSc(["x"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main"  , !Main  ) | !G2 ],
    !G2 = [ asc("id"    , !Id    ) | !G3 ],
    !G3 = [ asc("negate", !Negate) | !Nil].
    */


    /*
      // main = (id 1) + (-3)
      main = plus (id 1) (negate 3)
    */


    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    dump = [],
    // heap
    !Main = nSc([], eApp(eApp("plus", eApp("id", 1)), eApp("negate", 3))),
    !Plus = nPrim(plus),
    !Negate = nPrim(neg),
    !Id   = nSc(["x"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main"  , !Main  ) | !G2 ],
    !G2 = [ asc("id"    , !Id    ) | !G3 ],
    !G3 = [ asc("negate", !Negate) | !G4 ],
    !G4 = [ asc("plus"  , !Plus  ) | !Nil].


    //ti

    % Mark 4 (Arithmetic Operations)
    pushStackOnDump_App1 @@
    stk = [!A, !A1|T],
    dump = Dump,
    !A = nPrim(Prim),
    !A1 = nApp(!A, !B), !B = nApp(B1, B2)
    :- stk = [!B],
       dump = [[!A, !A1|T]|Dump],
       !A = nPrim(Prim),
       !A1 = nApp(!A, !B), !B = nApp(B1, B2).

    pushStackOnDump_Sc1 @@
    stk = [!A, !A1|T],
    dump = Dump,
    !A = nPrim(Prim),
    !A1 = nApp(!A, !B), !B = nSc(B1, B2)
    :- stk = [!B],
       dump = [[!A, !A1|T]|Dump],
       !A = nPrim(Prim),
       !A1 = nApp(!A, !B), !B = nSc(B1, B2).


    pushStackOnDump_ArithApp2 @@
    stk = [!A, !A1, !A2],
    dump = Dump,
    !A = nPrim(Prim),
    !A1 = nApp(!A, !B1), 
    !A2 = nApp(!A1, !B2), !B2 = nApp(B2L, B2R)
    :- stk = [!B2],
       dump = [[!A, !A1, !A2]|Dump],
       !A = nPrim(Prim),
       !A1 = nApp(!A, !B1),
       !A2 = nApp(!A1, !B2), !B2 = nApp(B2L, B2R).

    pushStackOnDump_ArithSc2 @@
    stk = [!A, !A1, !A2],
    dump = Dump,
    !A = nPrim(Prim),
    !A1 = nApp(!A, !B1), 
    !A2 = nApp(!A1, !B2), !B2 = nSc(B2L, B2R)
    :- stk = [!B2],
       dump = [[!A, !A1, !A2]|Dump],
       !A = nPrim(Prim),
       !A1 = nApp(!A, !B1), 
       !A2 = nApp(!A1, !B2), !B2 = nSc(B2L, B2R).


  negate @@
    stk = [!A, !A1],
    dump = Dump,
    !A = nPrim(neg),
    !A1 = nApp(!A, !B), !B = nNum(Num)
    :- _Num = - Num
       | stk = [!A1],
	 dump = Dump, 
	 !A = nPrim(neg), 
	 !A1 = nNum(_Num), !B = nNum(Num).
    

  plus @@
    stk = [!A, !A1, !A2],
    dump = Dump,
    !A = nPrim(plus),  
    !A1 = nApp(!A, !B1), !B1 = nNum(Num1),
    !A2 = nApp(!A1, !B2), !B2 = nNum(Num2)
    :- _Num = Num1 + Num2
       | stk = [!A1],
	 dump = Dump, 
	 !A = nPrim(plus),  
	 !A1 = nNum(_Num), !B1 = nNum(Num1),
	 !B2 = nNum(Num2).
	 

    restoreTheStack_numStep  @@
    stk = [!A], dump = [S|D], !A = nNum(Num)
    :-  stk = S, dump = D, !A = nNum(Num).
    

    unwind @@
    stk = [!A|S], !A = nApp(!A1, A2) 
    :- stk = [!A1, !A|S], !A = nApp(!A1, A2).

    instantiate_zip_args @@
    stk = [!A0|S], !A0 = nSc([V|Vs], Body), gbl = !Gbl 
    :- string(V), ground(Vs), ground(Body)
       | stk = [!Ar|S], gbl = !Gbl,
	 !A0 = nSc([V|Vs], Body),
	 !Ar = zip_args([V|Vs], Body, !Gbl).

    instantiate_0 @@
    stk = [!A0|S], !A0 = nSc([], Body), gbl = !Gbl 
    :- ground(Body)
       | stk = [!A0|S], gbl = !Gbl,
	 !A0 = inst(Body, !Gbl).

    {'$callback'(zerostep). 

	inst_number @@
	R = inst(N, !F) 
	:- int(N)
	   | R = nNum(N).

	inst_app @@
	R = inst(eApp(E1, E2), !F) 
	:- R = nApp(!H1, !H2), 
	   !H1 = inst(E1, !F),
	   !H2 = inst(E2, !F).

	inst_var_lookup @@
	R = inst(V1, !F), !F = [asc(V2, A)|!T] 
	:- string(V1), V1 \== V2 
	   | R = inst(V1, !T), !F = [asc(V2, A)|!T].

	inst_var_resolve @@
	R = inst(V1, !F), !F = [asc(V2, !A)|!T] 
	:- string(V1), V1 == V2
	   | R >< !A, !F = [asc(V2, !A)|!T].


	// Mark 2
// let rec
	init_inst_letRec @@
	R = inst(let_rec(Defs, Body), Env)
	:- R = inst_letRec(Defs, Body, Env, !F).

	inst_letRec @@
	R = inst_letRec([V = Def | Defs], Body, OldEnv, !F)
	:- R = inst_letRec(Defs, Body, !NewEnv, !F),
	   !PDef = waitingToInst(Def, !F),
	   !NewEnv = [asc(V, !PDef)|OldEnv].

	inst_letRec_finished @@
	R = inst_letRec([], Body, !Env, !F) 
	:- R = inst_letRecRHS(Body, !Env), 
	   !Env >< !F.

	inst_letRecRHS @@
	R = inst_letRecRHS(Body, Env),
	PDef = waitingToInst(Def, F)
	:- R = inst_letRecRHS(Body, Env),
	   PDef = inst(Def, F).

	inst_letRecRHS_finished @@
	R = inst_letRecRHS(Body, $env),
	:- num($env) =:= 2
	   | R = inst(Body, $env).



	GC_app @@
	!R = nApp(!A1, !A2) :- num(R) =:= 1 | .

	GC_number @@
	!R = nNum(N) :- int(N), num(R) =:= 1 | .

	GC_sc @@
	!R = nSc(Vs, Body) :- ground(Vs), ground(Body), num(R) =:= 1 | .

	GC_env @@
	!R = [asc(V, !Def)|!T] :- ground(V), num(R) =:= 1 |.


	append @@
	R = append([H|T], L) 
	:- R = [H|append(T, L)].

	zip_args @@
	stk = [!Ar,!A1|S], 
	!Ar = zip_args([V, V2|Vs], Body, F),
	!A1 = nApp(!A2, !A3)
	:- 
	    stk = [!Ar|S],
	    !Ar = zip_args([V2|Vs], Body, !F_),
	    !F_ = [asc(V, !A3)|F],
	    !A1 = nApp(!A2, !A3).

	zip_args_last1 @@
	stk = [!Ar,!An|S], 
	!Ar = zip_args([Vn], Body, F),
	!An = nApp(!A2, !A3)
	:- 
	    stk = [!Ar|S],
	    !Ar = inst(Body, !F_),
	    !F_ = [asc(Vn, !A3)|F],
	    !An >< !Ar.

    }.

}.



final @@
{ stk = [!A], dump = [], !A = nNum(N), $p[], @r }
  :- int(N) | result = N.


/*
final @@
stk = [!A], !A = n(N)
:- int(N) | result = N.
*/
