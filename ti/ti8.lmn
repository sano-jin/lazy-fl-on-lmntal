// {
/*
      main = id 3
      id = \x -> x
*/

/*
    init @@
    :- uniq |
	// stack
	stk = [!Main],
    // heap 
    !Main = sc([], app("id", 3)),
    !Id = sc([ "x" ], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !Nil].
*/

/*
 main = id 3
 id = s k k
 s = \x y z -> x z (y z)
 k = \x y -> x
*/

/*
    init @@
    :- uniq |
	// stack 
	stk = [!Main],
    // heap
    !Main = sc([], app("id", 3)),
    !Id   = sc([], app(app("s", "k"), "k")),
    !S    = sc(["x", "y", "z"], app(app("x", "z"), app("y", "z"))),
    !K    = sc(["x", "y"], "x"),
    // global
    gbl = !G1,
    !G1 = [ asc("main", !Main) | !G2 ],
    !G2 = [ asc("id"  , !Id  ) | !G3 ],
    !G3 = [ asc("s"   , !S   ) | !G4 ],
    !G4 = [ asc("k"   , !K   ) | !Nil].
*/


/*
 main = let x = 3; y = id x in y
 id = \x -> x
*/

/*
init @@
:- uniq |
	    // stack 
	    stk = [!Main],
    // heap
    !Main = sc([], 
      let([ "x" = sc([], 3), 
            "y" = sc([], app("id", "x")) ],
       	  "y"
      )),
    !Id = sc(["x"], "x"),
    // global
    gbl = !G1,
    !G1 = [asc("main", !Main)|!G2],
    !G2 = [asc("id", !Id)|!Nil].

*/

/*
 main = let rec x = id y; y = 3 in x
 id = \x -> x
*/

/*
init @@
:- uniq |
	// stack 
	stk = [!Main],
  // heap
  !Main = sc([], 
	     let_rec([ "x" = app("id", "y"), 
		       "y" = 3 ],
       		 "x"
	     )),
  !Id = sc(["x"], "x"),
  // global
  gbl = !G1,
  !G1 = [asc("main", !Main)|!G2],
  !G2 = [asc("id", !Id)|!Nil].
*/

/*
 K1 x y = y
 K x y = x
 pair x y f = f x y
 fst p = p K
 snd p = p K1
 f x y = 
  let_rec
   a = pair x b
   b = pair y a
  in
  fst (snd (snd (snd a)))
 main = f 3 4
*/


init @@
:- uniq |
	// stack 
	stk = [!Main],
  // heap
  !Main = sc([], app(app("f", 3), 4)),
  !F    = sc(["x", "y"], 	     
	     let_rec([ "a" = app(app("pair", "x"), "b"), 
		       "b" = app(app("pair", "y"), "a") 
		     ],
       		     app("fst", app("snd", app("snd", app("snd", "a"))))
	     )),
  !Snd  = sc(["p"], app("p", "k1")),
  !Fst  = sc(["p"], app("p", "k")),
  !Pair = sc(["x", "y", "f"], app(app("f", "x"), "y")),
  !K1   = sc(["x", "y"], "y"),
  !K    = sc(["x", "y"], "x"),
  // global
  gbl = !G1,
  !G1 = [ asc("main", !Main) | !G2 ],
  !G2 = [ asc("f"   , !F   ) | !G3 ],
  !G3 = [ asc("snd" , !Snd ) | !G4 ],
  !G4 = [ asc("fst" , !Fst ) | !G5 ],
  !G5 = [ asc("pair", !Pair) | !G6 ],
  !G6 = [ asc("k"   , !K   ) | !G7 ],
  !G7 = [ asc("k1"  , !K1  ) | !Nil].



/*
 pair x y f = f x y
 fst x y = x
 snd x y = y
 main = (((pair 2) (snd 3)) fst)
 id = \x -> x
*/

/*
init @@
:- uniq |
	// stack 
	stk = [!Main],
  // heap
  // fst (pair 2 (snd 3))
  !Main = sc([], app(app(app("pair", 2), app("snd", 3)), "fst")),
  !Pair = sc(["x", "y", "f"], app(app("f", "x"), "y")),
  !Fst  = sc(["x", "y"], "x"),
  !Snd  = sc(["x", "y"], "y"),
 // global
  gbl = !G1,
  !G1 = [ asc("main", !Main) | !G2 ],
  !G2 = [ asc("pair", !Pair) | !G3 ],
  !G3 = [ asc("fst" , !Fst ) | !G4 ],
  !G4 = [ asc("snd" , !Snd ) | !Nil].
*/


/*
 pair x y f = f x y
 fst x y = x
 snd x y = y
 main = let rec 
         list = pair 1 list
        in
         fst list
*/

/*
init @@
:- uniq |
    // stack 
    stk = [!Main],
  // heap
  !Main = sc([], 
	     let_rec([ "list" = app(app("pair", 1), "list") ],
		     app("list", "fst")
	     )),
  !Pair = sc(["x", "y", "f"], app(app("f", "x"), "y")),
  !Fst  = sc(["x", "y"], "x"),
  !Snd  = sc(["x", "y"], "y"),
  // global
  gbl = !G1,
  !G1 = [ asc("main", !Main) | !G2 ],
  !G2 = [ asc("pair", !Pair) | !G3 ],
  !G3 = [ asc("fst" , !Fst ) | !G4 ],
  !G4 = [ asc("snd" , !Snd ) | !Nil].
*/

/*
 pair x y f = f x y
 fst x y = x
 snd x y = y
 list = pair 1 list
 main = list fst
*/

/*
init @@
:- uniq |
	// stack 
	stk = [!Main],
  // heap
  !Main = sc([], app("list", "fst")),
  !List = sc([], app(app("pair", 1), "list")),
  !Pair = sc(["x", "y", "f"], app(app("f", "x"), "y")),
  !Fst  = sc(["x", "y"], "x"),
  !Snd  = sc(["x", "y"], "y"),

 // global
  gbl = !G1,
  !G1 = [ asc("main", !Main) | !G2 ],
  !G2 = [ asc("pair", !Pair) | !G3 ],
  !G3 = [ asc("fst" , !Fst ) | !G4 ],
  !G4 = [ asc("snd" , !Snd ) | !G5 ],
  !G5 = [ asc("list", !List) | !Nil].
*/

/*
 main          = twice twice twice id 3
 compose f g x = f (g x)
 id x          = x
 twice f       = compose f f 
*/

/*
init @@
:- uniq |
	// stack 
	stk = [!Main],
  // heap
  !Main    = sc([], app(app(app(app("twice", "twice"), "twice"), "id"), 3)),
  !Compose = sc(["f", "g", "x"], app("f", app("g", "x"))),
  !Id      = sc(["x"], "x"),
  !Twice   = sc(["f"], app(app("compose", "f"), "f")),  
 // global
  gbl = !G1,
  !G1 = [ asc("main"   , !Main   ) | !G2 ],
  !G2 = [ asc("compose", !Compose) | !G3 ],
  !G3 = [ asc("twice"  , !Twice  ) | !G4 ],
  !G4 = [ asc("id"     , !Id     ) | !Nil].
*/



//ti

unwind @@
stk = [!A|S], !A = app(!A1, A2) 
  :- stk = [!A1, !A|S], !A = app(!A1, A2).

instantiate_zip_args @@
stk = [!A0|S], !A0 = sc([V|Vs], Body), gbl = !Gbl 
  :- string(V), ground(Vs), ground(Body)
     | stk = [!Ar|S], gbl = !Gbl,
       !A0 = sc([V|Vs], Body),
       !Ar = zip_args([V|Vs], Body, !Gbl).

instantiate_0 @@
stk = [!A0|S], !A0 = sc([], Body), gbl = !Gbl 
  :- ground(Body)
     | stk = [!A0|S], gbl = !Gbl,
       !A0 = inst(Body, !Gbl).

// {'$callback'(zerostep). 

inst_number @@
R = inst(N, !F) 
  :- int(N)
     | R = n(N).

inst_app @@
R = inst(app(E1, E2), !F) 
  :- R = app(!H1, !H2), 
     !H1 = inst(E1, !F),
     !H2 = inst(E2, !F).

inst_var_lookup @@
R = inst(V1, !F), !F = [asc(V2, A)|!T] 
  :- string(V1), V1 \== V2 
     | R = inst(V1, !T), !F = [asc(V2, A)|!T].

inst_var_resolve @@
R = inst(V1, !F), !F = [asc(V2, !A)|!T] 
  :- string(V1), V1 == V2
     | R >< !A, !F = [asc(V2, !A)|!T].


// Mark 2
// let rec
init_inst_letRec @@
R = inst(let_rec(Defs, Body), Env)
  :- R = inst_letRec(Defs, Body, Env, !F).

inst_letRec @@
R = inst_letRec([V = Def | Defs], Body, OldEnv, !F)
  :- R = inst_letRec(Defs, Body, !NewEnv, !F),
     !PDef = waitingToInst(Def, !F),
     !NewEnv = [asc(V, !PDef)|OldEnv].

inst_letRec_finished @@
R = inst_letRec([], Body, !Env, !F) 
:- R = inst_letRecRHS(Body, !Env), 
   !Env >< !F.

inst_letRecRHS @@
R = inst_letRecRHS(Body, Env),
  PDef = waitingToInst(Def, F)
  :- R = inst_letRecRHS(Body, Env),
     PDef = inst(Def, F).

inst_letRecRHS_finished @@
R = inst_letRecRHS(Body, $env),
  :- num($env) =:= 2
     | R = inst(Body, $env).



GC_app @@
$r = app(!A1, !A2) :- num($r) =:= 1 | .

GC_number @@
!R = n(N) :- int(N), num(R) =:= 1 | .

GC_sc @@
!R = sc(Vs, Body) :- ground(Vs), ground(Body), num(R) =:= 1 | .


append @@
R = append([H|T], L) 
  :- R = [H|append(T, L)].

zip_args @@
stk = [!Ar,!A1|S], 
  !Ar = zip_args([V, V2|Vs], Body, F),
  !A1 = app(!A2, !A3)
  :- 
    stk = [!Ar|S],
    !Ar = zip_args([V2|Vs], Body, !F_),
    !F_ = [asc(V, !A3)|F],
    !A1 = app(!A2, !A3).

zip_args_last1 @@
stk = [!Ar,!An|S], 
  !Ar = zip_args([Vn], Body, F),
  !An = app(!A2, !A3)
  :- 
    stk = [!Ar|S],
    !Ar = inst(Body, !F_),
    !F_ = [asc(Vn, !A3)|F],
    !An >< !Ar.

// }.

// }.

/*
final @@
{ stk = [!A], !A = n(N), $p[], @r }
:- int(N) | result = N.
*/

final @@
stk = [!A], !A = n(N)
:- int(N) | result = N.
